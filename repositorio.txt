backend
________
package com.testelemontech.solicitacoes.config;

import java.time.LocalDateTime;
import java.util.GregorianCalendar;
import javax.xml.datatype.XMLGregorianCalendar;

public class ConversorData {


    public static LocalDateTime convertXMLGregorianCalendarToLocalDateTime(XMLGregorianCalendar xmlGregorianCalendar) {
        if (xmlGregorianCalendar != null) {
            GregorianCalendar gregorianCalendar = xmlGregorianCalendar.toGregorianCalendar();
            return gregorianCalendar.toZonedDateTime().toLocalDateTime();
        }
        return null;
    }
}ConversorData.java
______________________
package com.testelemontech.solicitacoes.config;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

import javax.xml.namespace.QName;

import com.testelemontech.solicitacoes.model.ModelRequest;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import br.com.lemontech.selfbooking.wsselfbooking.beans.Solicitacao;
import br.com.lemontech.selfbooking.wsselfbooking.beans.aereo.Aereo;
import br.com.lemontech.selfbooking.wsselfbooking.beans.aereo.AereoSeguimento;
import br.com.lemontech.selfbooking.wsselfbooking.services.WsSelfBooking;
import br.com.lemontech.selfbooking.wsselfbooking.services.WsSelfBookingService;
import br.com.lemontech.selfbooking.wsselfbooking.services.request.PesquisarSolicitacaoRequest;
import br.com.lemontech.selfbooking.wsselfbooking.services.response.PesquisarSolicitacaoResponse;
import jakarta.xml.bind.JAXBElement;

@Service
public class WsClient {

    @Value("${soap.keyClient}")
    private String clientKey;

    @Value("${soap.username}")
    private String username;

    @Value("${soap.password}")
    private String password;

    private static final Logger logger = LoggerFactory.getLogger(WsClient.class);

    @Autowired
    private WsSelfBookingService wsSelfBookingService;

    public List<ModelRequest> BuscarSolicitacoes(LocalDateTime startDate, LocalDateTime endDate) {
        logger.info("Solicitações de {} a {}", startDate, endDate);

        PesquisarSolicitacaoRequest request = buildRequest(startDate, endDate);
        logger.debug("Solicitação: {}", request);

        try {
            logger.info("Chamando serviço");
            WsSelfBooking port = wsSelfBookingService.getWsSelfBookingPort();
            PesquisarSolicitacaoResponse response = port.pesquisarSolicitacao(
                    clientKey,
                    username,
                    password,
                    request
            );

            logger.info("Resultados de Busca: {}", response);
            return processResponse(response);
        } catch (Exception e) {
            logger.error("Erro de busca: {}", e.getMessage(), e);
            return new ArrayList<>();
        }
    }

    private PesquisarSolicitacaoRequest buildRequest(LocalDateTime startDate, LocalDateTime endDate) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss'Z'");

        PesquisarSolicitacaoRequest request = new PesquisarSolicitacaoRequest();

        logger.debug("Data de Inicio: {}", startDate.format(formatter));
        request.getContent().add(new JAXBElement<>(new QName("dataInicial"), String.class, startDate.format(formatter)));

        logger.debug("Data Final: {}", endDate.format(formatter));
        request.getContent().add(new JAXBElement<>(new QName("dataFinal"), String.class, endDate.format(formatter)));

        request.getContent().add(new JAXBElement<>(new QName("registroInicial"), Integer.class, 1));

        return request;
    }

    private List<ModelRequest> processResponse(PesquisarSolicitacaoResponse response) {
        List<ModelRequest> modelRequests = new ArrayList<>();

        if (response == null || response.getSolicitacao() == null) {
            logger.warn("Vazio ou nulo");
            return modelRequests;
        }

        for (Solicitacao solicitacao : response.getSolicitacao()) {
            if (solicitacao.getAereos() != null) {
                for (Aereo aereo : solicitacao.getAereos().getAereo()) {
                    if (aereo.getAereoSeguimento() != null) {
                        for (AereoSeguimento segment : aereo.getAereoSeguimento()) {
                            logger.debug("Solicitação processada: {}", segment);
                            ModelRequest request = mapToModelRequest(solicitacao, aereo, segment);
                            modelRequests.add(request);
                        }
                    }
                }
            }
        }

        logger.info("Numero de solicitações processadas: {}", modelRequests.size());
        return modelRequests;
    }

    private ModelRequest mapToModelRequest(Solicitacao solicitacao, Aereo aereo, AereoSeguimento segment) {
        ModelRequest request = new ModelRequest();

        logger.debug("Busca solicitações por ID: {}", solicitacao.getIdSolicitacao());
        request.setId(Long.valueOf(solicitacao.getIdSolicitacao()));
        request.setNomePassageiro(solicitacao.getPassageiros().getPassageiro().get(0).getNomeCompleto());
        request.setCiaAerea(aereo.getSource());
        request.setDataHoraSaida(ConversorData.convertXMLGregorianCalendarToLocalDateTime(segment.getDataSaida()));
        request.setDataHoraChegada(ConversorData.convertXMLGregorianCalendarToLocalDateTime(segment.getDataChegada()));
        request.setCidadeOrigem(segment.getCidadeOrigem());
        request.setCidadeDestino(segment.getCidadeDestino());

        return request;
    }
}WsClient.java
_________________________
package com.testelemontech.solicitacoes.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import br.com.lemontech.selfbooking.wsselfbooking.services.WsSelfBookingService;

@Configuration
public class WsConfig {

    @Bean
    public WsSelfBookingService wsSelfBookingService() {
        return new WsSelfBookingService();
    }
}WsConfig.java
____________________
package com.testelemontech.solicitacoes.controller;

import com.testelemontech.solicitacoes.model.ModelRequest;
import com.testelemontech.solicitacoes.service.ModelRequestService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@Slf4j
@RestController
@RequestMapping("/solicitacoes")
@CrossOrigin(origins = "*")
@RequiredArgsConstructor
public class ModelRequestController {

    private final ModelRequestService service;

    @GetMapping
    public ResponseEntity<List<ModelRequest>> getAllSolicitacoes() {
        List<ModelRequest> solicitacoes = service.getAllModelRequests();
        return solicitacoes.isEmpty() ? ResponseEntity.noContent().build() : ResponseEntity.ok(solicitacoes);
    }

    @GetMapping("/sincronizar")
    public ResponseEntity<?> sincronizarSolicitacoes() {
        try {
            List<ModelRequest> novasSolicitacoes = service.sincronizarSolicitacoes();
            if (novasSolicitacoes.isEmpty()) {
                return ResponseEntity.ok("Nenhuma nova solicitação encontrada.");
            }
            return ResponseEntity.ok(novasSolicitacoes);
        } catch (Exception e) {
            log.error("Erro ao sincronizar solicitações: ", e);
            return ResponseEntity.internalServerError().body("Erro ao sincronizar: " + e.getMessage());
        }
    }
}ModelRequestController.java
________________________________________
package com.testelemontech.solicitacoes.controller;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import jakarta.annotation.PostConstruct;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Component
public class Teste {

    private static final Logger logger = LoggerFactory.getLogger(Teste.class);

    @Value("${soap.keyClient}")
    private String keyClient;

    @Value("${soap.username}")
    private String username;

    @Value("${soap.password}")
    private String password;

    @Value("${soap.wsdlUrl}")
    private String wsdlUrl;

    @PostConstruct
    public void logVariaveis() {
        logger.info("Testando as variáveis de ambiente:");
        logger.info("soap.keyClient = {}", keyClient);
        logger.info("soap.username = {}", username);
        // Atenção: Exibir a senha no log não é recomendado em produção
        logger.info("soap.password = {}", "******");
        logger.info("soap.wsdlUrl = {}", wsdlUrl);

        // Verifica a acessibilidade da URL do WS
        verificarUrlAcessibilidade(wsdlUrl);
    }

    // Método para verificar se a URL está acessível
    private void verificarUrlAcessibilidade(String urlString) {
        try {
            // Cria a URL e abre a conexão HTTP
            URL url = new URL(urlString);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");
            connection.setConnectTimeout(5000); // Timeout de 5 segundos
            connection.setReadTimeout(5000);

            // Faz a requisição e verifica o código de resposta
            int responseCode = connection.getResponseCode();
            if (responseCode == HttpURLConnection.HTTP_OK) {
                logger.info("A URL está acessível! Código de resposta: {}", responseCode);
            } else {
                logger.warn("Falha ao acessar a URL. Código de resposta: {}", responseCode);
            }
        } catch (IOException e) {
            logger.error("Erro ao verificar a URL: {}", e.getMessage());
        }
    }
}Teste.java
_________________________
package com.testelemontech.solicitacoes.model;

import jakarta.persistence.*;
import lombok.Getter;
import lombok.Setter;

import java.io.Serializable;
import java.time.LocalDateTime;

@Getter
@Setter
@Entity
@Table(name = "model_requests")
public class ModelRequest implements Serializable {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    // Campo adicionado para mapear a coluna 'codigo_solicitacao'
    @Column(name = "codigo_solicitacao", nullable = false, length = 255)
    private String codigoSolicitacao;

    @Column(name = "nome_passageiro", nullable = false, length = 255)
    private String nomePassageiro;

    @Column(name = "cia_aerea", nullable = false, length = 255)
    private String ciaAerea;

    @Column(name = "data_hora_saida", nullable = false)
    private LocalDateTime dataHoraSaida;

    @Column(name = "data_hora_chegada", nullable = false)
    private LocalDateTime dataHoraChegada;

    @Column(name = "cidade_origem", nullable = false, length = 255)
    private String cidadeOrigem;

    @Column(name = "cidade_destino", nullable = false, length = 255)
    private String cidadeDestino;

    @Column(name = "status", nullable = false, length = 255)
    private String status;

    @Column(name = "updated_at", nullable = false)
    private LocalDateTime updatedAt;

    @Version
    private Integer version;

    public ModelRequest() {}

    @PrePersist
    public void prePersist() {
        updatedAt = LocalDateTime.now();
        // Se codigoSolicitacao não estiver preenchido, gera um valor padrão
        if (codigoSolicitacao == null || codigoSolicitacao.isEmpty()) {
            codigoSolicitacao = generateCodigoSolicitacao();
        }
    }

    @PreUpdate
    public void preUpdate() {
        updatedAt = LocalDateTime.now();
    }

    private String generateCodigoSolicitacao() {
        // Exemplo de geração de código usando o timestamp
        return "SOL-" + System.currentTimeMillis();
    }
}ModelRequest.java
____________________________
package com.testelemontech.solicitacoes.repository;

import com.testelemontech.solicitacoes.model.ModelRequest;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.stereotype.Repository;

@Repository
public interface ModelRequestRepository extends JpaRepository<ModelRequest, Long>, JpaSpecificationExecutor<ModelRequest> {
}ModelRequestRepository.java
___________________________________
package com.testelemontech.solicitacoes.service;

import com.testelemontech.solicitacoes.model.ModelRequest;
import com.testelemontech.solicitacoes.repository.ModelRequestRepository;
import com.testelemontech.solicitacoes.config.WsClient;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import jakarta.transaction.Transactional;
import java.time.LocalDateTime;
import java.util.List;

@Slf4j
@Service
@RequiredArgsConstructor
public class ModelRequestService {

    private final ModelRequestRepository modelRequestRepository;
    private final WsClient wsClient;

    public List<ModelRequest> getAllModelRequests() {
        return modelRequestRepository.findAll();
    }

    @Transactional
    public List<ModelRequest> sincronizarSolicitacoes() {
        LocalDateTime startDate = LocalDateTime.now().minusMonths(3);
        LocalDateTime endDate = LocalDateTime.now();

        List<ModelRequest> modelRequests = wsClient.BuscarSolicitacoes(startDate, endDate);

        if (modelRequests == null || modelRequests.isEmpty()) {
            log.info(" Nenhuma nova solicitação encontrada.");
            return List.of();
        }

        log.info(" Sincronizando {} solicitações...", modelRequests.size());

        // Garante que os dados sejam tratados corretamente antes de salvar
        modelRequests.forEach(request -> {
            request.setId(null); 
            request.setUpdatedAt(LocalDateTime.now());
        });

        return modelRequestRepository.saveAll(modelRequests);
    }
}ModelRequestService.java
________________________________
package com.testelemontech.solicitacoes;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class SolicitacoesApplication {

    public static void main(String[] args) {
        SpringApplication.run(SolicitacoesApplication.class, args);
    }
}SolicitacoesApplication.java
________________________________
spring.application.name=solicitacoes

spring.datasource.url=jdbc:mysql://${MYSQL_HOST}:${MYSQL_PORT}/${MYSQL_DB}
spring.datasource.username=${MYSQL_USER}
spring.datasource.password=${MYSQL_PASSWORD}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
spring.jpa.defer-datasource-initialization=true
spring.sql.init.platform=mysql
spring.jpa.open-in-view=false


server.port=${SERVER_PORT}

soap.keyClient=${soap.keyClient}
soap.password=${soap.password}
soap.username=${soap.username}
soap.wsdlUrl=${soap.wsdlUrl}

spring.main.allow-bean-definition-overriding=true

spring.ws.client.log-request=true
spring.ws.client.log-response=true
logging.level.org.springframework.ws.client.MessageTracing.sent=DEBUG
logging.level.org.springframework.ws.client.MessageTracing.received=DEBUG

application.properties
__________________________
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.4.3</version>
		<relativePath/>
	</parent>
	<groupId>com.testelemontech</groupId>
	<artifactId>FullStackJavaTeste-Lemontech</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>solicitacoes</name>
	<description>teste-solicitacoes-armazenamento</description>
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>17</java.version>
		<cxf.version>4.0.3</cxf.version>
		<jaxb.version>4.0.2</jaxb.version>
		<httpclient.version>4.5.13</httpclient.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>com.mysql</groupId>
			<artifactId>mysql-connector-j</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-frontend-jaxws</artifactId>
			<version>4.0.3</version>
		</dependency>
		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-frontend-jaxrs</artifactId>
			<version>4.0.3</version>
		</dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <scope>provided</scope>
        </dependency>
    </dependencies>
	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.cxf</groupId>
				<artifactId>cxf-codegen-plugin</artifactId>
				<version>4.0.3</version>
				<executions>
					<execution>
						<id>generate-sources</id>
						<phase>generate-sources</phase>
						<configuration>
							<sourceRoot>src/main/resources/generated-sources/cxf</sourceRoot>
							<wsdlOptions>
								<wsdlOption>
									<wsdl>https://treinamento.lemontech.com.br/wsselfbooking/WsSelfBookingService?wsdl</wsdl>
								</wsdlOption>
							</wsdlOptions>
						</configuration>
						<goals>
							<goal>wsdl2java</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>
pom.xml
____________________


Frontend
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lista de Solicitações</title>
    <link rel="stylesheet" href="css/style_home.css">
</head>
<body>
    <div class="container">
        <h1>Solicitações</h1>
        <div class="buttons">
            <button onclick="window.location.href='create.html'">Nova Solicitação</button>
            <button id="syncButton">Sincronizar Solicitações</button>
        </div>
        <table>
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Nome do Passageiro</th>
                    <th>CIA Aérea</th>
                    <th>Data/Hora de Saída</th>
                    <th>Data/Hora de Chegada</th>
                    <th>Origem</th>
                    <th>Destino</th>
                </tr>
            </thead>
            <tbody id="listaSolicitacoes">
            </tbody>
        </table>
    </div>

    <script src="js/app.js"></script>
    <script>
        document.getElementById("syncButton").addEventListener("click", function() {
            sincronizarSolicitacoes();
        });
    </script>
    <style>
        .buttons {
            display: flex;
            gap: 10px;
        }
    </style>
</body>
</html>home.html
_____________________
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Criar Nova Solicitação</title>
    <link rel="stylesheet" href="css/style_create.css">
</head>
<body>
    <div class="container">
        <h1>Criar Nova Solicitação</h1>

        <div class="form-container">
            <div class="row">
                <div class="col">
                    <label for="nome_pax">Passageiro:</label>
                    <input type="text" id="nome_pax" placeholder="Nome">
                </div>
                <div class="col">
                    <label for="origem">Origem:</label>
                    <input type="text" id="origem" placeholder="Cidade de Origem">
                </div>
                <div class="col">
                    <label for="destino">Destino:</label>
                    <input type="text" id="destino" placeholder="Cidade de Destino">
                </div>
                <div class="col">
                    <label for="data_ida">Ida:</label>
                    <input type="date" id="data_ida">
                </div>
                <div class="col">
                    <label for="data_volta">Volta:</label>
                    <input type="date" id="data_volta">
                </div>
            </div>
        </div>

        <div class="button-group">
            <button class="btn criar" id="btnCriar">Criar</button>
            <button class="btn voltar" onclick="window.location.href='home.html'">Voltar</button>
        </div>
    </div>

    <script src="js/app_create.js"></script>
</body>
</html>create.html
_____________________
const API_URL = 'http://localhost:8081/solicitacoes';

// Carrega a lista de solicitações
async function carregarSolicitacoes() {
    const lista = document.getElementById("listaSolicitacoes");
    if (!lista) return; 

    lista.innerHTML = "<tr><td colspan='7'>Carregando...</td></tr>"; 

    try {
        const response = await fetch(API_URL);
        if (!response.ok) throw new Error("Erro ao carregar solicitações");

        const solicitacoes = await response.json();
        lista.innerHTML = solicitacoes.map(solicitacao => `
            <tr>
                <td>${solicitacao.id}</td>
                <td>${solicitacao.nomePassageiro}</td>
                <td>${solicitacao.ciaAerea}</td>
                <td>${solicitacao.dataHoraSaida}</td>
                <td>${solicitacao.dataHoraChegada}</td>
                <td>${solicitacao.cidadeOrigem}</td>
                <td>${solicitacao.cidadeDestino}</td>
            </tr>
        `).join("");
    } catch (error) {
        console.error(error);
        lista.innerHTML = "<tr><td colspan='7'>Erro ao carregar</td></tr>"; 
    }
}

// Sincroniza as solicitações
async function sincronizarSolicitacoes() {
    try {
        const response = await fetch(`${API_URL}/sincronizar`, { method: "GET" });
        if (!response.ok) throw new Error("Erro ao sincronizar solicitações");
        
        alert("Solicitações sincronizadas com sucesso!");
        carregarSolicitacoes(); 
    } catch (error) {
        console.error(error);
        alert("Erro ao sincronizar solicitações.");
    }
}

// Cria uma nova solicitação
document.addEventListener("DOMContentLoaded", function() {
    const form = document.getElementById("formSolicitacao");
    if (!form) return; 

    form.addEventListener("submit", async function(event) {
        event.preventDefault();

        const novaSolicitacao = {
            nomePassageiro: document.getElementById("nomePassageiro").value.trim(),
            cidadeOrigem: document.getElementById("cidadeOrigem").value.trim(),
            cidadeDestino: document.getElementById("cidadeDestino").value.trim(),
            dataHoraSaida: document.getElementById("dataIda").value,
            dataHoraChegada: document.getElementById("dataVolta").value,
            ciaAerea: document.getElementById("ciaAerea").value, 
            status: "Pendente"
        };

        if (Object.values(novaSolicitacao).some(value => !value)) {
            alert("Todos os campos são obrigatórios.");
            return;
        }

        try {
            const response = await fetch(API_URL, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(novaSolicitacao)
            });

            if (!response.ok) throw new Error("Erro ao criar solicitação");

            alert("Solicitação criada!");
            carregarSolicitacoes(); 
            form.reset();
        } catch (error) {
            console.error(error);
            alert("Erro ao criar solicitação.");
        }
    });

    // Evento para sincronizar solicitações ao clicar no botão
    const btnSincronizar = document.getElementById("btnSincronizar");
    if (btnSincronizar) {
        btnSincronizar.addEventListener("click", sincronizarSolicitacoes);
    }
});

// Carrega as solicitações inicialmente
carregarSolicitacoes();app.js
_______________________________
document.getElementById('btnCriar').addEventListener('click', function () {
    const nomePassageiro = document.getElementById('nome_pax').value.trim();
    const cidadeOrigem = document.getElementById('origem').value.trim();
    const cidadeDestino = document.getElementById('destino').value.trim();
    const dataHoraSaida = document.getElementById('data_ida').value;
    const dataHoraChegada = document.getElementById('data_volta').value;

    if (!nomePassageiro || !cidadeOrigem || !cidadeDestino || !dataHoraSaida || !dataHoraChegada) {
        alert("Todos os campos são obrigatórios.");
        return;
    }

    const formatarDataHora = (data) => {
        return `${data}T12:00:00`;  
    };

    const novaSolicitacao = {
        nomePassageiro,
        cidadeOrigem,
        cidadeDestino,
        dataHoraSaida: formatarDataHora(dataHoraSaida),
        dataHoraChegada: formatarDataHora(dataHoraChegada),
        status: "Pendente",
        ciaAerea: "Fictício Airlines" 
    };

    // Recupera as solicitações do localStorage ou cria um array vazio
    const solicitacoes = JSON.parse(localStorage.getItem('solicitacoes')) || [];

    solicitacoes.push(novaSolicitacao);

    localStorage.setItem('solicitacoes', JSON.stringify(solicitacoes));

    alert('Solicitação criada com sucesso!');
    window.location.href = 'home.html';  
});app_create
____________________
const API_URL = 'http://localhost:8081/solicitacoes';

// Carrega a lista de solicitações
async function carregarSolicitacoes() {
    const lista = document.getElementById("listaSolicitacoes");
    if (!lista) return; 

    lista.innerHTML = "<tr><td colspan='4'>Carregando...</td></tr>";

    try {
        const response = await fetch(API_URL);
        if (!response.ok) throw new Error("Erro ao carregar solicitações");

        const solicitacoes = await response.json();
        lista.innerHTML = solicitacoes.map(solicitacao => `
            <tr>
                <td>${solicitacao.id}</td>
                <td>${solicitacao.nomePassageiro}</td>
                <td>${solicitacao.cidadeOrigem}</td>
                <td>${solicitacao.cidadeDestino}</td>
            </tr>
        `).join("");
    } catch (error) {
        console.error(error);
        lista.innerHTML = "<tr><td colspan='4'>Erro ao carregar</td></tr>";
    }
}

// Cria uma nova solicitação
document.addEventListener("DOMContentLoaded", function() {
    const form = document.getElementById("formSolicitacao");
    if (!form) return; 

    form.addEventListener("submit", async function(event) {
        event.preventDefault();

        const novaSolicitacao = {
            nomePassageiro: document.getElementById("nomePassageiro").value.trim(),
            cidadeOrigem: document.getElementById("cidadeOrigem").value.trim(),
            cidadeDestino: document.getElementById("cidadeDestino").value.trim(),
            dataHoraSaida: document.getElementById("dataIda").value,
            dataHoraChegada: document.getElementById("dataVolta").value,
            status: "Pendente"
        };

        // Verifica se todos os campos foram preenchidos
        if (Object.values(novaSolicitacao).some(value => !value)) {
            alert("Todos os campos são obrigatórios.");
            return;
        }

        try {
            const response = await fetch(API_URL, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(novaSolicitacao)
            });

            if (!response.ok) throw new Error("Erro ao criar solicitação");

            alert("Solicitação criada!");
            window.location.href = "home.html";
        } catch (error) {
            console.error(error);
            alert("Erro ao criar solicitação.");
        }
    });
});

carregarSolicitacoes(); dom.js
______________________
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: Arial, sans-serif;
    background-color: #f0f2f5;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
}

.container {
    width: 100%;
    max-width: 900px;
    text-align: center;
}

h1 {
    color: #007bff;
    font-size: 24px;
    margin-bottom: 15px;
}

/* Retângulo para os campos */
.form-container {
    background: #fff;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    display: flex;
    flex-direction: column;
    gap: 10px;
}

/* Layout em uma única linha */
.row {
    display: flex;
    gap: 10px;
}

.col {
    flex: 1;
    display: flex;
    flex-direction: column;
}

label {
    text-align: left;
    font-weight: bold;
    font-size: 14px;
}

input {
    width: 100%;
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 5px;
}

/* Botões */
.button-group {
    display: flex;
    justify-content: center;
    gap: 10px;
    margin-top: 15px;
}

.btn {
    width: 120px;
    padding: 10px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    color: #fff;
}

.criar {
    background-color: #28a745;
}

.criar:hover {
    background-color: #218838;
}

.voltar {
    background-color: #007bff;
}

.voltar:hover {
    background-color: #0056b3;
}
___________________
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: Arial, sans-serif;
  background-color: #f0f2f5;
  color: #333;
  display: flex;
  justify-content: center;
  padding: 20px;
}

.container {
  width: 100%;
  max-width: 1200px;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 15px; 
}


h1 {
  font-size: 32px;
  color: #007bff;
}


button {
  background-color: #28a745;
  color: #fff;
  padding: 12px 24px;
  font-size: 16px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s ease, transform 0.3s ease;
  width: 200px; 
  text-align: center;
}

button:hover {
  background-color: #218838;
  transform: scale(1.05);
}

/* Tabela */
table {
  width: 100%;
  border-collapse: collapse;
  background-color: #fff;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  border-radius: 8px;
}

table th, table td {
  padding: 12px;
  text-align: left;
  border: 1px solid #ddd;
}

table th {
  background-color: #007bff;
  color: #fff;
  font-weight: bold;
}

table tr:nth-child(even) {
  background-color: #f8f9fa;
}

table tr:hover {
  background-color: #e9ecef;
}

@media (max-width: 768px) {
  table th, table td {
      padding: 8px;
      font-size: 14px;
  }

  button {
      width: 100%;
      font-size: 14px;
  }
}
_____________
# O desafio (Consulta de Solicitações de Viagens)

Você deverá criar uma aplicação consumidora de nossa API de webservice para consultar solicitações de viagens e persistir em banco de dados os dados de produtos Aéreos:

**Endpoint:** https://treinamento.lemontech.com.br/wsselfbooking/WsSelfBookingService?wsdl  
**Método:** `pesquisarSolicitacao`

---

# Fullstack Java Teste

Projeto desenvolvido para demonstrar habilidades em desenvolvimento fullstack com **Java** no backend e tecnologias web no frontend.  
A aplicação consome uma **API SOAP** para buscar solicitações de viagens, armazena dados em um banco **MySQL** e expõe endpoints REST.

---

## Tecnologias Utilizadas

### Backend
- **Java 17**
- **Spring Boot**
  - `spring-boot-starter-web`
  - `spring-boot-starter-data-jpa`
  - `spring-boot-starter-validation`
  - `lombok`
- **Maven**
- **MySQL**

### Frontend
- **HTML, CSS, JavaScript**
- **Fetch API**

---

## Estrutura do Projeto

Arquitetura **MVC** dividindo responsabilidades para manutenção e escalabilidade.

    fullstack-java-teste/
    ├── Backend/                         
    │   ├── src/
    │   │   ├── main/java/com/testelemontech/solicitacoes/
    │   │   │   ├── controller/     # Define os endpoints da API
    │   │   │   ├── service/        # Regras de negócio e chamadas à API SOAP
    │   │   │   ├── repository/     # Persistência de dados (Spring Data JPA)
    │   │   │   ├── model/          # Entidades que representam tabelas do banco
    │   │   │   ├── config/         # Configuração do Spring Boot e integração SOAP
    │   ├── resources/
    │       ├── application.properties  # Configurações gerais do projeto
    │   ├── pom.xml                 # Dependências do Maven
    └── Frontend/                    
        ├── css/                     # Estilos (CSS)
        ├── js/                      # Scripts para manipulação da API
        ├── home.html                # Página principal com listagem de solicitações
        ├── create.html              # Página para criar solicitações fictícias


---

Após o consumo da API SOAP pelo método `pesquisarSolicitacao`, o serviço realiza os seguintes passos:

1. **Filtragem Temporal:** Seleciona apenas as solicitações criadas nos últimos 3 meses.
2. **Filtragem por Produto:** Dentre as solicitações filtradas, seleciona aquelas que contêm produtos Aéreos.
3. **Extração de Dados Essenciais:** Para cada solicitação filtrada, extrai informações como Nome do Passageiro, CIA Aérea, Data/Hora de Saída e Chegada, Cidades de Origem e Destino.
4. **Persistência:** Os dados extraídos são enviados à camada de repositório para serem persistidos no banco de dados MySQL.

### Diagrama de Arquitetura

```
graph TD
    A[Início] -->|Requisição SOAP| B[API SOAP]
    B -->|Consulta de Solicitações| C[Service - Sincronização]
    C -->|Filtragem e Persistência| D[Banco de Dados MySQL]
    D -->|Disponibilização de Dados| E[Endpoints REST]
    E -->|Consumo de Dados| F[Interface do Usuário]
```
---

## Como Executar o Projeto

### Pré-requisitos
- [Java 17+](https://www.oracle.com/java/technologies/javase/jdk17-archive-downloads.html)
- [Maven](https://maven.apache.org/)
- [MySQL](https://dev.mysql.com/downloads/installer/)
- [Postman](https://www.postman.com/) (opcional)

### Configuração das Variáveis de Ambiente
Defina as seguintes variáveis antes de rodar o backend:
```sh
export MYSQL_HOST= host_local
export MYSQL_PORT= porta_local
export MYSQL_DB= schema mysql
export MYSQL_USER= seu_usuario
export MYSQL_PASSWORD= sua_senha
export SERVER_PORT=8081
export SOAP_USERNAME=seu_usuario
export SOAP_PASSWORD=sua_senha
export SOAP_WSDL_URL=https://treinamento.lemontech.com.br/wsselfbooking/WsSelfBookingService?wsdl
```

### Rodando o Backend
1. Clone o repositório:
   ```sh
   git clone https://github.com/MatheusHyago/fullstack-java-teste.git
   ```
2. Entre na pasta do backend:
   ```sh
   cd fullstack-java-teste/Backend
   ```
3. Compile e execute:
   ```sh
   mvn clean install
   ```
      ```sh
   mvn spring-boot:run
   ```
4. Teste a API em:
   
http://localhost:8081/solicitacoes
   
http://localhost:8081/solicitacoes/sincronizar

### Rodando o Frontend
1. Abra o command prompt do Node.js e entre na pasta:
   ```sh
   cd C:\Users\UserFicticio\fullstack-java-teste\Frontend\Server
   ```
2. Execute o comando:
   ```sh
   npm start
   ```
3. O servidor rodará na porta 3000 como localhost:
   ```sh
   http://localhost:3000
   ```




